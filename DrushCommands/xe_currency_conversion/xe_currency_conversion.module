<?php

/**
 * @file
 * Contains xe_currency_conversion module implementation.
 */

use Drupal\xe_currency_conversion\XeCurrencyConversionConstants;

/**
 * Implements hook_cron().
 *
 * Check if the current time is within the allowed window for XE updates and
 * perform XE Currency Conversion updates accordingly.
 */
function xe_currency_conversion_cron() {
  // Check if the current time is within the allowed window for XE updates.
  $current_time = strtotime(date('H:i:s'));
  $window_open = strtotime(XeCurrencyConversionConstants::WINDOW_OPEN);
  $window_close = strtotime(XeCurrencyConversionConstants::WINDOW_CLOSE);

  if ($current_time >= $window_open && $current_time <= $window_close) {
    // Perform XE Currency Conversion updates.
    xe_currency_conversion_import_data();
  }
}

/**
 * Custom function to import data from XE Currency Conversion API.
 */
function xe_currency_conversion_import_data() {
  // Get the API client ID from the module configuration.
  $config = \Drupal::config('xe_currency_conversion.settings');
  $client_id = $config->get('xe_currency_conversion_client_id');

  if (!empty($client_id)) {
    // Call the importData method on the service.
    $service = \Drupal::service('xe_currency_conversion.service');

    // Import data from the XE.com API.
    $service->importData();
  }
  else {
    // Log error if the API client ID is empty.
    \Drupal::logger('xe_currency_conversion')->error('XE Currency Conversion - Client API ID is empty.');
  }
}

/**
 * @file
 * Provides views integration for xe currency conversion table.
 */

/**
 * Implements hook_views_data().
 */
function xe_currency_conversion_views_data() {
  $data = [];

  $data['xe_currency_conversion']['table']['group'] = t('XE Currency Conversion');
  $data['xe_currency_conversion']['table']['base'] = [
    'field' => 'crid',
    'title' => t('XE Currency'),
    'help' => t('The XE currency conversion table'),
    'weight' => -10,
  ];

  $data['xe_currency_conversion']['crid'] = [
    'title' => t('Currency Id'),
    'help' => t('The unique identifier for a given currency item.'),
    'field' => [
      'id' => 'numeric',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];

  $data['xe_currency_conversion']['symbol'] = [
    'title' => t('Currency code'),
    'help' => t('The shorthand code for the currency.'),
    'field' => [
      'id' => 'standard',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'string',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];

  $data['xe_currency_conversion']['name'] = [
    'title' => t('Name'),
    'help' => t('The human-readable name of the currency.'),
    'field' => [
      'id' => 'standard',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'string',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];

  $data['xe_currency_conversion']['rate'] = [
    'title' => t('Rate'),
    'help' => t('The rate of the currency against the Great British Pound.'),
    'field' => [
      'id' => 'numeric',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];

  $data['xe_currency_conversion']['inverse'] = [
    'title' => t('Inverse rate'),
    'help' => t('The rate of the Great British pound against the given currency.'),
    'field' => [
      'id' => 'numeric',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'sort' => [
      'id' => 'standard',
    ],
  ];

  return $data;
}
